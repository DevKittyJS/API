function loadIcons(){const icons=document.querySelectorAll(".dk_ico");const styleSheetId="DevKitty";let styleSheet=document.getElementById(styleSheetId);if(!styleSheet){styleSheet=document.createElement("style");styleSheet.id=styleSheetId;document.head.appendChild(styleSheet)}
styleSheet.textContent="";const addedIcons=new Set();const supportsMask=CSS.supports("mask-image","url('dummy.svg')")||CSS.supports("-webkit-mask-image","url('dummy.svg')");if(!supportsMask){console.error("DevKitty icons not supported in this browser.");icons.forEach((el)=>el.remove());return}
const version=Date.now();icons.forEach((el)=>{const iconClass=Array.from(el.classList).find((c)=>c.startsWith("i-"));if(!iconClass)return;const iconName=iconClass.replace("i-","");const folderClass=Array.from(el.classList).find((c)=>c.startsWith("dk-")&&c!=="dk_ico");if(!folderClass){console.warn(`Icon "${iconName}" has no folder class like dk-core, dk-brands, or dk-misc.`);return}
const folderName=folderClass.replace("dk-","");const cacheKey=`${folderName}/${iconName}`;if(addedIcons.has(cacheKey))return;addedIcons.add(cacheKey);const url=`https://raw.githubusercontent.com/DevKittyJS/API/main/icons/${folderName}/${iconName}.svg?v=${version}`;const cssRule=`
.dk_ico.${folderClass}.i-${iconName} {
  display: inline-block;
  width: 1em;
  height: 1em;
  background-color: currentColor;
  -webkit-mask-image: url('${url}');
          mask-image: url('${url}');
  -webkit-mask-repeat: no-repeat;
          mask-repeat: no-repeat;
  -webkit-mask-size: contain;
          mask-size: contain;
  -webkit-mask-position: center;
          mask-position: center;
}
`;styleSheet.appendChild(document.createTextNode(cssRule));console.log(`Icon style for "${cacheKey}" added`)})}
function loadScreens(){const screens=document.querySelectorAll(".dk-ldscr");if(screens.length>1){console.error("Multiple loading screens detected. Please ensure only one is present.");return}
const styleSheetId="DevKittyScreens";const overlayId="loading-overlay";let styleSheet=document.getElementById(styleSheetId);if(!styleSheet){styleSheet=document.createElement("style");styleSheet.id=styleSheetId;document.head.appendChild(styleSheet)}
const addedStyles=new Set();const version=Date.now();let spinnerEl=null;let originalEl=null;let customBg="#202020";let spinnerColor="#fff";screens.forEach((el)=>{const styleClass=Array.from(el.classList).find((c)=>c.startsWith("scr-"));if(!styleClass)return;const folderName=styleClass.replace("scr-","");const sizeClass=Array.from(el.classList).find((c)=>c.startsWith("s-"));const size=sizeClass?sizeClass.replace("s-",""):"large";if(folderName!=="blank"){const styleKey=`${folderName}-${size}`;if(!addedStyles.has(styleKey)){addedStyles.add(styleKey);const url=`https://raw.githubusercontent.com/DevKittyJS/API/main/ldscr/${folderName}/spinner_${size}.css?v=${version}`;fetch(url).then((res)=>{if(!res.ok)throw new Error(`Failed to load: ${url}`);return res.text()}).then((cssText)=>{styleSheet.appendChild(document.createTextNode(cssText));console.log(`Screen style "${folderName}" [${size}] applied.`)}).catch((err)=>{console.warn(`Could not load screen style "${folderName}" [${size}]:`,err)})}}
if(!spinnerEl){spinnerEl=el.cloneNode(!0);originalEl=el;const bgClass=Array.from(el.classList).find((c)=>c.startsWith("bg-"));if(bgClass){customBg=decodeURIComponent(bgClass.replace("bg-",""))}
const colClass=Array.from(el.classList).find((c)=>c.startsWith("col-"));if(colClass){spinnerColor=decodeURIComponent(colClass.replace("col-",""))}}});if(spinnerEl){const overlay=document.createElement("div");overlay.id=overlayId;overlay.style.background=customBg;overlay.appendChild(spinnerEl);document.body.appendChild(overlay);if(originalEl&&originalEl.parentNode){originalEl.parentNode.removeChild(originalEl)}
const overlayStyles=`
#${overlayId} {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  transition: opacity 0.5s ease;
}

/* Override spinner color variable */
#${overlayId} .dk-ldscr {
  --bg-color: ${spinnerColor};
}
`;styleSheet.appendChild(document.createTextNode(overlayStyles));document.body.style.overflow="hidden";window.addEventListener("load",()=>{setTimeout(()=>{overlay.style.opacity="0";setTimeout(()=>{overlay.remove();if(styleSheet&&styleSheet.parentNode)styleSheet.remove();document.body.style.overflow=""},500)},1000)})}}
document.addEventListener("DOMContentLoaded",()=>{loadIcons();loadScreens()})